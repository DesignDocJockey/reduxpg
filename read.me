
//impure function
const conversionRate = .23;
function ImpureRateCalculation(amount) {
    return amount * conversionRate; 
}
ImpureRateCalculation(55);

//-------------Core Redux Principles
//1. Pure functions
/*  Only work with locally Scoped Variables
    Given the same input, the output will always be the same
    Reliable, Simple, and Predictable 
 */
function PureRateCalculation(amount, conversionRate) {
    return amount * conversionRate;
}
PureRateCalculation(55, conversionRate);

//2. Immutability (Clone and modify a copy of the object instead of mutating the original object)
/* State should be Immutable
   We have to clone our state object using the Object.assign() method
   Creates a snapshot of our state and a history of changes
  
    let state1 = {team:"Colts", name:"Peyton", rating:"99.99"};
    let state2 = Object.assign({}, state1, {team: "Broncos", rating:"92.99"});
    console.log(state1);
    console.log(state2);
 */



 node_modules/.bin/babel --plugins transform-react-jsx -w -o src/example.min.js src/example.js

 ## Instructions
- `npm install`
- `npm start`
- pull up `http://localhost:3000`

## A note about module versions
I generally try to pin the critical packages in package.json to exact version numbers.
That should ensure that things should work for you even if the React apis change significantly
in future versions. If future versions of React are released, you can continue using the pinned
versions in these files, or you can try to upgrade and follow the migration docs that React usually
has with big api changes.

You can check the readme at https://github.com/jamischarles/ps_redux-demos for any major updates.
